var WARN_LEVEL;
(function (WARN_LEVEL) {
    WARN_LEVEL[WARN_LEVEL["WARN"] = 1] = "WARN";
    WARN_LEVEL[WARN_LEVEL["DANGER"] = 2] = "DANGER";
    WARN_LEVEL[WARN_LEVEL["ERROR"] = 3] = "ERROR";
})(WARN_LEVEL || (WARN_LEVEL = {}));
var Warn = function (err, level) {
    if (level === void 0) { level = 1; }
    if (level === 1) {
        console.error('warning:', err);
    }
    if (level === 2) {
        console.error('error:', err);
    }
    if (level === 3) {
        throw new Error(err);
    }
};

var isWebGl2 = true;
var createContext = function (query) {
    var dom = document.querySelector(query);
    if (!dom) {
        Warn('Dom is not available!');
        return;
    }
    var gl = dom.getContext('webgl2');
    if (!gl) {
        gl = dom.getContext('webgl');
        isWebGl2 = false;
    }
    if (!gl) {
        Warn('not support WebGLã€‚', WARN_LEVEL.ERROR);
    }
    return gl;
};
var ShaderType;
(function (ShaderType) {
    ShaderType["VERTEX_SHADER"] = "vs";
    ShaderType["FRAGMENT_SHADER"] = "fs";
})(ShaderType || (ShaderType = {}));
var loadShader = function (gl, type, source) {
    var shader = type === 'vs' ?
        gl.createShader(gl.VERTEX_SHADER) :
        gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(shader, source);
    console.log(gl, type, source, shader);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        gl.deleteShader(shader);
        throw new Error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
    }
    return shader;
};
var createShaderProgram = function (gl, vsSource, fsSource) {
    var vertexShader = loadShader(gl, ShaderType.VERTEX_SHADER, vsSource);
    var fragmentShader = loadShader(gl, ShaderType.FRAGMENT_SHADER, fsSource);
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        throw new Error('Unable to initialize the shader program: ' +
            gl.getProgramInfoLog(shaderProgram));
    }
    gl.useProgram(shaderProgram);
    return shaderProgram;
};

var setRectangle = function (gl, x, y, width, height) {
    var x1 = x;
    var x2 = x + width;
    var y1 = y;
    var y2 = y + height;
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
        x1, y1,
        x2, y1,
        x1, y2,
        x1, y2,
        x2, y1,
        x2, y2,
    ]), gl.STATIC_DRAW);
};

export { ShaderType, WARN_LEVEL, Warn, createContext, createShaderProgram, isWebGl2, loadShader, setRectangle };
