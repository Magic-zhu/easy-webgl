var WARN_LEVEL;
(function (WARN_LEVEL) {
    WARN_LEVEL[WARN_LEVEL["WARN"] = 1] = "WARN";
    WARN_LEVEL[WARN_LEVEL["DANGER"] = 2] = "DANGER";
    WARN_LEVEL[WARN_LEVEL["ERROR"] = 3] = "ERROR";
})(WARN_LEVEL || (WARN_LEVEL = {}));
var warn = function (err, level) {
    if (level === void 0) { level = 1; }
    if (level === 1) {
        console.error('warning:', err);
    }
    if (level === 2) {
        console.error('error:', err);
    }
    if (level === 3) {
        throw new Error(err);
    }
};

var toRgb = function (colorString) {
    if (colorString[0] !== '#' || colorString.length !== 7) {
        warn('color is not valid. example:#000000', 3);
    }
    else {
        var t = colorString.split('#');
        var rgb = [];
        for (var i = 0; i < 3; i++) {
            rgb.push(parseInt(t[1][i] + t[1][i + 1], 16));
        }
        return rgb;
    }
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var Config = new Proxy({
    canvasWidth: 1,
    canvasHeight: 1,
}, {});

var canvasToWebglCoordinate = function (x, y) {
    return {
        x: (x / Config.canvasWidth) * 2 - 1,
        y: (y / Config.canvasHeight) * 2 - 1,
    };
};

var Shape = (function () {
    function Shape() {
    }
    return Shape;
}());

var Point = (function (_super) {
    __extends(Point, _super);
    function Point(ix, iy, toWebGl) {
        if (toWebGl === void 0) { toWebGl = false; }
        var _this = _super.call(this) || this;
        _this.x = 0;
        _this.y = 0;
        if (toWebGl) {
            var _a = canvasToWebglCoordinate(ix, iy), x = _a.x, y = _a.y;
            _this.x = x;
            _this.y = y;
        }
        else {
            _this.x = ix;
            _this.y = iy;
        }
        return _this;
    }
    return Point;
}(Shape));

var offsetLine = function (distance, startPoint, endPoint) {
    var k = (endPoint.y - startPoint.y) / (endPoint.x - startPoint.x);
    var tx = Math.sqrt(Math.pow(distance, 2) / (1 + Math.pow(k, 2)));
    var ty = k * tx;
    console.log(tx, ty, endPoint.y + ty);
    return [
        new Point(startPoint.x - tx, startPoint.y + ty),
        new Point(endPoint.x - tx, endPoint.y + ty),
        new Point(startPoint.x + tx, startPoint.y - ty),
        new Point(endPoint.x + tx, endPoint.y - ty),
    ];
};

var isWebGl2 = true;
var createContext = function (query) {
    var dom = document.querySelector(query);
    if (!dom) {
        warn('Dom is not available!');
        return;
    }
    var gl = dom.getContext('webgl2');
    if (!gl) {
        gl = dom.getContext('webgl');
        isWebGl2 = false;
    }
    if (!gl) {
        warn('not support WebGL!', WARN_LEVEL.ERROR);
    }
    return gl;
};
var ShaderType;
(function (ShaderType) {
    ShaderType["VERTEX_SHADER"] = "vs";
    ShaderType["FRAGMENT_SHADER"] = "fs";
})(ShaderType || (ShaderType = {}));
var loadShader = function (gl, type, source) {
    var shader = type === 'vs'
        ? gl.createShader(gl.VERTEX_SHADER)
        : gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(shader, source);
    console.log(gl, type, source, shader);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        gl.deleteShader(shader);
        throw new Error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
    }
    return shader;
};
var createShaderProgram = function (gl, vsSource, fsSource) {
    var vertexShader = loadShader(gl, ShaderType.VERTEX_SHADER, vsSource);
    var fragmentShader = loadShader(gl, ShaderType.FRAGMENT_SHADER, fsSource);
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        throw new Error('Unable to initialize the shader program: ' +
            gl.getProgramInfoLog(shaderProgram));
    }
    gl.useProgram(shaderProgram);
    return shaderProgram;
};
var initBuffers = function (gl, vertices) {
    var positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    return positionBuffer;
};

var Scene = (function () {
    function Scene() {
        this.context = [];
    }
    Scene.prototype.add = function (shape) {
        this.context.push(shape);
    };
    return Scene;
}());

var Vector2 = (function () {
    function Vector2(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    Vector2.prototype.set = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    Vector2.prototype.setScalar = function (scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
    };
    Vector2.prototype.setX = function (x) {
        this.x = x;
        return this;
    };
    Vector2.prototype.setY = function (y) {
        this.y = y;
        return this;
    };
    Vector2.prototype.clone = function () {
        return new Vector2(this.x, this.y);
    };
    Vector2.prototype.copy = function (v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    };
    Vector2.prototype.add = function (v) {
        this.x += v.x;
        this.y += v.y;
        return this;
    };
    Vector2.prototype.addScalar = function (s) {
        this.x += s;
        this.y += s;
        return this;
    };
    Vector2.prototype.addVectors = function (a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this;
    };
    Vector2.prototype.addScaledVector = function (v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        return this;
    };
    Vector2.prototype.sub = function (v) {
        this.x -= v.x;
        this.y -= v.y;
        return this;
    };
    Vector2.prototype.subScalar = function (s) {
        this.x -= s;
        this.y -= s;
        return this;
    };
    Vector2.prototype.subVectors = function (a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this;
    };
    Vector2.prototype.multiply = function (v) {
        this.x *= v.x;
        this.y *= v.y;
        return this;
    };
    Vector2.prototype.multiplyScalar = function (s) {
        this.x *= s;
        this.y *= s;
        return this;
    };
    Vector2.prototype.divide = function (v) {
        this.x /= v.x;
        this.y /= v.y;
        return this;
    };
    Vector2.prototype.divideScalar = function (s) {
        return this.multiplyScalar(1 / s);
    };
    Vector2.prototype.applyMatrix3 = function (m) {
        var x = this.x;
        var y = this.y;
        var e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6];
        this.y = e[1] * x + e[4] * y + e[7];
        return this;
    };
    Vector2.prototype.min = function (v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        return this;
    };
    Vector2.prototype.max = function (v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        return this;
    };
    Vector2.prototype.clamp = function (min, max) {
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        return this;
    };
    Vector2.prototype.clampScalar = function (minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        return this;
    };
    Vector2.prototype.clampLength = function (min, max) {
        var length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    };
    Vector2.prototype.floor = function () {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    };
    Vector2.prototype.ceil = function () {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    };
    Vector2.prototype.round = function () {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    };
    Vector2.prototype.roundToZero = function () {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        return this;
    };
    Vector2.prototype.dot = function (v) {
        return this.x * v.x + this.y * v.y;
    };
    Vector2.prototype.cross = function (v) {
        return this.x * v.y - this.y * v.x;
    };
    Vector2.prototype.lengthSq = function () {
        return this.x * this.x + this.y * this.y;
    };
    Vector2.prototype.length = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };
    Vector2.prototype.manhattanLength = function () {
        return Math.abs(this.x) + Math.abs(this.y);
    };
    Vector2.prototype.normalize = function () {
        return this.divideScalar(this.length() || 1);
    };
    Vector2.prototype.angle = function () {
        var angle = Math.atan2(-this.y, -this.x) + Math.PI;
        return angle;
    };
    Vector2.prototype.distanceTo = function (v) {
        return Math.sqrt(this.distanceToSquared(v));
    };
    Vector2.prototype.distanceToSquared = function (v) {
        var dx = this.x - v.x;
        var dy = this.y - v.y;
        return dx * dx + dy * dy;
    };
    Vector2.prototype.manhattanDistanceTo = function (v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    };
    Vector2.prototype.setLength = function (length) {
        return this.normalize().multiplyScalar(length);
    };
    Vector2.prototype.lerp = function (v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        return this;
    };
    Vector2.prototype.lerpVectors = function (v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        return this;
    };
    Vector2.prototype.equals = function (v) {
        return v.x === this.x && v.y === this.y;
    };
    Vector2.prototype.fromArray = function (array, offset) {
        if (offset === void 0) { offset = 0; }
        this.x = array[offset];
        this.y = array[offset + 1];
        return this;
    };
    Vector2.prototype.toArray = function (array, offset) {
        if (array === void 0) { array = []; }
        if (offset === void 0) { offset = 0; }
        array[offset] = this.x;
        array[offset + 1] = this.y;
        return array;
    };
    Vector2.prototype.fromBufferAttribute = function (attribute, index, offset) {
        if (offset !== undefined) {
            console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
        }
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        return this;
    };
    Vector2.prototype.rotateAround = function (center, angle) {
        var c = Math.cos(angle);
        var s = Math.sin(angle);
        var x = this.x - center.x;
        var y = this.y - center.y;
        this.x = x * c - y * s + center.x;
        this.y = x * s + y * c + center.y;
        return this;
    };
    Vector2.prototype.random = function () {
        this.x = Math.random();
        this.y = Math.random();
        return this;
    };
    return Vector2;
}());
Vector2.prototype.isVector2 = true;

var pointsVertexShader = function () {
    return "\n    attribute vec4 a_position;\n    void main() {\n      gl_Position = a_position;\n    }\n  ";
};
var pointsFragmentShader = function (r, g, b) {
    return "\n      void main(){\n        gl_FragColor = vec4(".concat(r, ", ").concat(g, ", ").concat(b, ", 1.0);\n      }\n  ");
};

var Line = (function (_super) {
    __extends(Line, _super);
    function Line(option) {
        var _this = _super.call(this) || this;
        _this.draw();
        return _this;
    }
    Line.prototype.draw = function () { };
    return Line;
}(Shape));
((function (_super) {
    __extends(LineW, _super);
    function LineW(option) {
        return _super.call(this, option) || this;
    }
    return LineW;
})(Line));

var EwContext = (function () {
    function EwContext(query) {
        this.gl = null;
        this.program = null;
        this.strokeStyle = '';
        this.lineWidth = 1;
        this.strokeRgb = [];
        this._path = [];
        this._pathArray = [];
        this._pathStatus = 'end';
        this._scene = new Scene();
        this.init(query);
    }
    EwContext.prototype.beginPath = function () {
        this._pathStatus = 'begin';
    };
    EwContext.prototype.closePath = function () {
        this._pathStatus = 'end';
        this._pathArray.push(this._path);
        this._path = [];
    };
    EwContext.prototype.moveTo = function (x, y) {
        this._path.push(new Point(x, y, true));
        this._pathStatus = 'begin';
    };
    EwContext.prototype.lineTo = function (x, y) {
        if (this._pathStatus !== 'begin') {
            warn('Not ivalid,please use moveTo first', 2);
            return;
        }
        this._path.push(new Point(x, y, true));
    };
    EwContext.prototype.init = function (query) {
        this.gl = createContext(query);
    };
    EwContext.prototype.clearRect = function () { };
    EwContext.prototype.clear = function () {
        var gl = this.gl;
        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.clearDepth(1.0);
    };
    EwContext.prototype.drawImage = function () { };
    EwContext.prototype.fillRect = function (x, y, width, height) { };
    EwContext.prototype.stroke = function () {
        for (var i = 0, l = this._pathArray.length; i < l; i++) {
            for (var j = 1, m = this._pathArray[i].length; j < m; j++) {
                var beginPoint = this._pathArray[i][j - 1];
                var endPoint = this._pathArray[i][j];
                this._scene.add(new Line({ beginPoint: beginPoint, endPoint: endPoint, gl: this.gl }));
            }
        }
        if (this.lineWidth === 1) ;
    };
    EwContext.prototype.strokeRect = function (x, y, width, height) { };
    return EwContext;
}());

export { EwContext, Point, Scene, ShaderType, Shape, Vector2, WARN_LEVEL, canvasToWebglCoordinate, createContext, createShaderProgram, initBuffers, isWebGl2, loadShader, offsetLine, pointsFragmentShader, pointsVertexShader, toRgb, warn };
